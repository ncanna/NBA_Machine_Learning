# -*- coding: utf-8 -*-
"""NBAmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHN5QbyFpEgOh_A1XjbVWDA2MDa6NPwv
"""

#https://www.basketball-reference.com/leagues/NBA_2014_totals.html
#https://hoopshype.com/2015/11/05/these-are-the-ratings-of-all-players-in-nba-2k16/

import pandas as pd
import requests
from bs4 import BeautifulSoup
from tabulate import tabulate
from google.colab import files

"""# **Web Scraping Ratings**"""

url = 'https://hoopshype.com/2015/11/05/these-are-the-ratings-of-all-players-in-nba-2k16/'

r = requests.get(url)
data = r.text

soup = BeautifulSoup(data)
soup.prettify

res = requests.get(url)
soup = BeautifulSoup(res.content,'lxml')
table = soup.find_all('table')[0] 
#Ratings by year = rby
rby = pd.read_html(str(table))
print(rby[0].to_json(orient='records'))

rbyTab = tabulate(rby[0], headers='keys', tablefmt='plain') 
rbySplit = rbyTab.split('\n')
print(rbySplit)

data = []
for a in rbySplit:
  a = a.split(' ')
  a[:] = [x for x in a if x != '']
  data.append(a)

data.pop(1)
data[:5]

df = pd.DataFrame(data=data)
df = df.loc[::2]
df.dropna(axis = 0)
df.head(5)

df = df.iloc[1:]
df.drop(df.columns[[-1,]], axis=1, inplace=True)
df.drop(df.columns[[0,]], axis=1, inplace=True)
df.columns = ['First', 'Last', '2K14', '2K15', '2K16']
df.tail(5)

df['Player'] = df['First'].str.cat(df['Last'],sep=" ")
df.sort_values(by=['Player'], inplace=True)
col2 = df.pop("Player")
df.insert(2, col.name, col2)
df.drop(df.columns[[0,1]], axis = 1, inplace=True)
df.tail(5)

"""# **Joining Ratings and Metrics**"""

#uYY = totals for years YY = 14, 15, 16
u14 = 'https://www.basketball-reference.com/leagues/NBA_2014_totals.html'

#tYY = totals for years YY = 14, 15, 16
t14 = requests.get(u14)

#dYY = data for years YY = 14, 15, 16
d14 = t14.text

#sYY = parse urls for years YY = 14, 15, 16
s14 = BeautifulSoup(d14)
s14.prettify 

#rYY = requests.get for years YY = 14, 15, 16
r14 = requests.get(u14)
s14 = BeautifulSoup(r14.content,'lxml')
table14 = s14.find_all('table')[0] 

#rtYY = ratings for players in years YY = 14, 15, 16
rt14 = pd.read_html(str(table14))
print(rt14[0].to_json(orient='records'))

#rtYYTab and rtYYSplit to tabulate and splot player stats in years YY = 14, 15, 16
rt14Tab = tabulate(rt14[0], headers='keys', tablefmt='plain') 
rt14Split = rt14Tab.split('\n')
print(rt14Split)

#sp14 for limiter split data in years YY = 14, 15, 16
sp14 = []
for a in rt14Split:
  a = a.split(' ')
  a[:] = [x for x in a if x != '']
  sp14.append(a)
sp14.pop(1)
sp14[:5]
print(sp14)

#!repeat for 15 and 16
#!shift headers
#!concatenate names, sort by first name

#dfYY for data frames of player stats in years YY = 14, 15, 16 
df14 = pd.DataFrame(data=sp14)
df14.dropna(axis = 0)
df14header = df14.iloc[0] 
df14 = df14[1:] 
df14.columns = df14header
#Concatenate first and last names
df14['Name'] = df14['Pos'].str.cat(df14['Age'],sep=" ")
col = df14.pop("Name")
df14.insert(2, col.name, col)
df14.sort_values(by=['Pos'], inplace=True)
df14.drop(df14.columns[[0,3,4]], axis = 1, inplace=True)
df14.columns[0:].tolist()
#Fix headers shifted from web scraping via df14.columns[:n].tolist()
List14 = ['Rk', 'Player', 'Pos','Age', 'Tm','G','GS','MP','FG','FGA','FG%','3P','3PA','3P%','2P','2PA','2P%','eFG%','FT','FTA','FT%',
          'ORB','DRB','TRB','AST','STL','BLK','TOV','PF','PTS', None, None]
df14.columns = df14.columns[:0].tolist() + List14
df14.drop(df14.columns[[-1, -2]], axis=1, inplace=True)
df14.tail(5)

df14.rename(columns={'Player':'Name'}, inplace=True)
df14.tail(5)

nba = pd.merge(df14, df, on='Name', sort=False)
nba

df14.iloc[[10]]
nbaPlayerData.iloc[[10]]
df14.tail(5)
nbaPlayerData.tail(5)
df14.describe
df14.Name.nunique()
#nbaPlayerData
df14.Name.nunique()

nba
nba.describe

nba_c = nba.drop(columns = ['2K14', '2K15', '2K16'])
nba_c.describe

"""# **Models**"""

#splitting into training and testing. training will be 360, testing will be last 119 (75/25 split).
train = nbaPlayerData[:360]
test = nbaPlayerData[360:]

train.columns

#Isolating x (features) and y (output/response) for the nbaPlayerData set
#Also dropping some columns that wont really add to our predictions

nba_training_x = train.drop(['2016_rating', 'Unnamed: 0', 'Unnamed: 0.1', 'Pos', 'Year', 'Player', 'blanl', 'blank2', 'Tm'], axis = 1)
nba_training_y = train['2016_rating']

nba_training_x

import numpy as np
from sklearn.impute import SimpleImputer

#nba_training_x
fill_NaN = SimpleImputer(missing_values=np.nan, strategy='mean')
imputed_DF = pd.DataFrame(fill_NaN.fit_transform(nba_training_x))
imputed_DF.columns = nba_training_x.columns
imputed_DF.index = nba_training_x.index

nba_training_x = imputed_DF

#Doing the same for the test set
nba_test_x = test.drop(['2016_rating', 'Unnamed: 0', 'Unnamed: 0.1', 'Pos', 'Year', 'Player', 'blanl', 'blank2', 'Tm'], axis = 1)
nba_test_y = test['2016_rating']

#filling NA values of test with the average of each column like above
#nba_training_x
fill_NaN2 = SimpleImputer(missing_values=np.nan, strategy='mean')
imputed_DF2 = pd.DataFrame(fill_NaN.fit_transform(nba_test_x))
imputed_DF2.columns = nba_test_x.columns
imputed_DF2.index = nba_test_x.index

nba_test_x = imputed_DF2

#Model 1: Regression Model
from sklearn.linear_model import LogisticRegression
LogisticRegression()

#fit the model
nba_player_model = LogisticRegression().fit(nba_training_x, nba_training_y)

# Making predictions!
preds = pd.DataFrame(nba_player_model.predict(nba_test_x)) #predicting the test set - last 119 values
preds1 = pd.DataFrame(nba_player_model.predict(nba_training_x)) #predicting the second first 360 values
print(nba_test_y)

#combining the data frames with the predictions, ignoring the index so we can merge it to our original player data
numbers = pd.concat([preds1, preds], ignore_index=True)
Machine_Predictions = pd.DataFrame(columns=['Machine_Predictions'])
Machine_Predictions['Machine_Predictions'] = numbers[0]
nbaPlayerData['Machine_Predictions'] = Machine_Predictions['Machine_Predictions']

nbaPlayerData.Tm.unique()

#creating a dictionary we can easily pull the teams and their data from
teams = ['OKC', 'BRK', 'MIA', 'ORL', 'MIN', 'SAS', 'BOS', 'NOP', 'POR',
       'PHI', 'HOU', 'IND', 'MIL', 'TOR', 'CHI', 'DEN', 'TOT', 'ATL',
       'CHO', 'NYK', 'LAL', 'DAL', 'WAS', 'GSW', 'PHO', 'LAC', 'SAC',
       'DET', 'UTA', 'MEM', 'CLE']

team_dataframes = {}

for Tm in teams: 
  team_dataframes[Tm] = nbaPlayerData[nbaPlayerData.Tm==Tm]

print("ACTUAL TEAM RATINGS" + "\n")
#OKC
OKC = team_dataframes['OKC']
OKC_Rating = OKC['2016_rating']
OKC_Rating = OKC_Rating.sort_values(ascending=False).iloc[0:10].sum()
OKC_Rating 
print("OKC: ", OKC_Rating)

#BRK
BRK = team_dataframes['BRK']
BRK_Rating = BRK['2016_rating']
BRK_Rating = BRK_Rating.sort_values(ascending=False).iloc[0:10].sum()
BRK_Rating 
print("BRK: ", BRK_Rating)

#MIA
MIA = team_dataframes['MIA']
MIA_Rating = MIA['2016_rating']
MIA_Rating = MIA_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIA_Rating 
print("MIA: ", MIA_Rating)

#ORL
ORL = team_dataframes['ORL']
ORL_Rating = ORL['2016_rating']
ORL_Rating = ORL_Rating.sort_values(ascending=False).iloc[0:10].sum()
ORL_Rating 
print("ORL: ", ORL_Rating)

#MIN
MIN = team_dataframes['MIN']
MIN_Rating = MIN['2016_rating']
MIN_Rating = MIN_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIN_Rating 
print("MIN: ", MIN_Rating)

#SAS
SAS = team_dataframes['SAS']
SAS_Rating = SAS['2016_rating']
SAS_Rating = SAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAS: ", SAS_Rating)

#BOS
BOS = team_dataframes['BOS']
BOS_Rating = BOS['2016_rating']
BOS_Rating = BOS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("BOS: ", BOS_Rating)

#NOP
NOP = team_dataframes['NOP']
NOP_Rating = NOP['2016_rating']
NOP_Rating = NOP_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NOP: ", NOP_Rating)

#POR
POR = team_dataframes['POR']
POR_Rating = POR['2016_rating']
POR_Rating = POR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("POR: ", POR_Rating)

#PHI
PHI = team_dataframes['PHI']
PHI_Rating = PHI['2016_rating']
PHI_Rating = PHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHI: ", PHI_Rating)

#HOU
HOU = team_dataframes['HOU']
HOU_Rating = HOU['2016_rating']
HOU_Rating = HOU_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("HOU: ", HOU_Rating)

#IND
IND = team_dataframes['IND']
IND_Rating = IND['2016_rating']
IND_Rating = IND_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("IND: ", IND_Rating)

#MIL
MIL = team_dataframes['MIL']
MIL_Rating = MIL['2016_rating']
MIL_Rating = MIL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MIL: ", MIL_Rating)

#TOR
TOR = team_dataframes['TOR']
TOR_Rating = TOR['2016_rating']
TOR_Rating = TOR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOR: ", TOR_Rating)

#CHI
CHI = team_dataframes['CHI']
CHI_Rating = CHI['2016_rating']
CHI_Rating = CHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CHI: ", CHI_Rating)

#DEN
DEN = team_dataframes['DEN']
DEN_Rating = DEN['2016_rating']
DEN_Rating = DEN_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DEN: ", DEN_Rating)

#TOT
TOT = team_dataframes['TOT']
TOT_Rating = TOT['2016_rating']
TOT_Rating = TOT_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOT: ", TOT_Rating)

#ATL
ATL = team_dataframes['ATL']
ATL_Rating = ATL['2016_rating']
ATL_Rating = ATL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("ATL: ", ATL_Rating)

#NYK
NYK = team_dataframes['NYK']
NYK_Rating = NYK['2016_rating']
NYK_Rating = NYK_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NYK: ", NYK_Rating)

#LAL
LAL = team_dataframes['LAL']
LAL_Rating = LAL['2016_rating']
LAL_Rating = LAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAL: ", LAL_Rating)

#DAL
DAL = team_dataframes['DAL']
DAL_Rating = DAL['2016_rating']
DAL_Rating = DAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DAL: ", DAL_Rating)

#WAS
WAS = team_dataframes['WAS']
WAS_Rating = WAS['2016_rating']
WAS_Rating = WAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("WAS: ", WAS_Rating)

#GSW
GSW = team_dataframes['GSW']
GSW_Rating = GSW['2016_rating']
GSW_Rating = GSW_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("GSW: ", GSW_Rating)

#PHO
PHO = team_dataframes['PHO']
PHO_Rating = PHO['2016_rating']
PHO_Rating = PHO_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHO: ", PHO_Rating)

#LAC
LAC = team_dataframes['LAC']
LAC_Rating = LAC['2016_rating']
LAC_Rating = LAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAC: ", LAC_Rating)

#SAC
SAC = team_dataframes['SAC']
SAC_Rating = SAC['2016_rating']
SAC_Rating = SAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAC: ", SAC_Rating)

#DET
DET = team_dataframes['DET']
DET_Rating = DET['2016_rating']
DET_Rating = DET_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DET: ", DET_Rating)

#UTA
UTA = team_dataframes['UTA']
UTA_Rating = UTA['2016_rating']
UTA_Rating = UTA_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("UTA: ", UTA_Rating)

#MEM
MEM = team_dataframes['MEM']
MEM_Rating = MEM['2016_rating']
MEM_Rating = MEM_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MEM: ", MEM_Rating)

#CLE
CLE = team_dataframes['CLE']
CLE_Rating = CLE['2016_rating']
CLE_Rating = CLE_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CLE: ", CLE_Rating)

print("PREDICTED TEAM RATINGS" + "\n")
#OKC
OKC = team_dataframes['OKC']
OKC_Rating = OKC['Machine_Predictions']
OKC_Rating = OKC_Rating.sort_values(ascending=False).iloc[0:10].sum()
OKC_Rating 
print("OKC: ", OKC_Rating)

#BRK
BRK = team_dataframes['BRK']
BRK_Rating = BRK['Machine_Predictions']
BRK_Rating = BRK_Rating.sort_values(ascending=False).iloc[0:10].sum()
BRK_Rating 
print("BRK: ", BRK_Rating)

#MIA
MIA = team_dataframes['MIA']
MIA_Rating = MIA['Machine_Predictions']
MIA_Rating = MIA_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIA_Rating 
print("MIA: ", MIA_Rating)

#ORL
ORL = team_dataframes['ORL']
ORL_Rating = ORL['Machine_Predictions']
ORL_Rating = ORL_Rating.sort_values(ascending=False).iloc[0:10].sum()
ORL_Rating 
print("ORL: ", ORL_Rating)

#MIN
MIN = team_dataframes['MIN']
MIN_Rating = MIN['Machine_Predictions']
MIN_Rating = MIN_Rating.sort_values(ascending=False).iloc[0:10].sum()
MIN_Rating 
print("MIN: ", MIN_Rating)

#SAS
SAS = team_dataframes['SAS']
SAS_Rating = SAS['Machine_Predictions']
SAS_Rating = SAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAS: ", SAS_Rating)

#BOS
BOS = team_dataframes['BOS']
BOS_Rating = BOS['Machine_Predictions']
BOS_Rating = BOS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("BOS: ", BOS_Rating)

#NOP
NOP = team_dataframes['NOP']
NOP_Rating = NOP['Machine_Predictions']
NOP_Rating = NOP_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NOP: ", NOP_Rating)

#POR
POR = team_dataframes['POR']
POR_Rating = POR['Machine_Predictions']
POR_Rating = POR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("POR: ", POR_Rating)

#PHI
PHI = team_dataframes['PHI']
PHI_Rating = PHI['Machine_Predictions']
PHI_Rating = PHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHI: ", PHI_Rating)

#HOU
HOU = team_dataframes['HOU']
HOU_Rating = HOU['Machine_Predictions']
HOU_Rating = HOU_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("HOU: ", HOU_Rating)

#IND
IND = team_dataframes['IND']
IND_Rating = IND['Machine_Predictions']
IND_Rating = IND_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("IND: ", IND_Rating)

#MIL
MIL = team_dataframes['MIL']
MIL_Rating = MIL['Machine_Predictions']
MIL_Rating = MIL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MIL: ", MIL_Rating)

#CHI
CHI = team_dataframes['CHI']
CHI_Rating = CHI['Machine_Predictions']
CHI_Rating = CHI_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CHI: ", CHI_Rating)

#DEN
DEN = team_dataframes['DEN']
DEN_Rating = DEN['Machine_Predictions']
DEN_Rating = DEN_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DEN: ", DEN_Rating)

#TOR
TOR = team_dataframes['TOT']
TOR_Rating = TOT['Machine_Predictions']
TOR_Rating = TOR_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("TOR: ", TOR_Rating)

#ATL
ATL = team_dataframes['ATL']
ATL_Rating = ATL['Machine_Predictions']
ATL_Rating = ATL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("ATL: ", ATL_Rating)

#NYK
NYK = team_dataframes['NYK']
NYK_Rating = NYK['Machine_Predictions']
NYK_Rating = NYK_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("NYK: ", NYK_Rating)

#LAL
LAL = team_dataframes['LAL']
LAL_Rating = LAL['Machine_Predictions']
LAL_Rating = LAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAL: ", LAL_Rating)

#DAL
DAL = team_dataframes['DAL']
DAL_Rating = DAL['Machine_Predictions']
DAL_Rating = DAL_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DAL: ", DAL_Rating)

#WAS
WAS = team_dataframes['WAS']
WAS_Rating = WAS['Machine_Predictions']
WAS_Rating = WAS_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("WAS: ", WAS_Rating)

#GSW
GSW = team_dataframes['GSW']
GSW_Rating = GSW['Machine_Predictions']
GSW_Rating = GSW_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("GSW: ", GSW_Rating)

#PHO
PHO = team_dataframes['PHO']
PHO_Rating = PHO['Machine_Predictions']
PHO_Rating = PHO_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("PHO: ", PHO_Rating)

#LAC
LAC = team_dataframes['LAC']
LAC_Rating = LAC['Machine_Predictions']
LAC_Rating = LAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("LAC: ", LAC_Rating)

#SAC
SAC = team_dataframes['SAC']
SAC_Rating = SAC['Machine_Predictions']
SAC_Rating = SAC_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("SAC: ", SAC_Rating)

#DET
DET = team_dataframes['DET']
DET_Rating = DET['Machine_Predictions']
DET_Rating = DET_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("DET: ", DET_Rating)

#UTA
UTA = team_dataframes['UTA']
UTA_Rating = UTA['Machine_Predictions']
UTA_Rating = UTA_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("UTA: ", UTA_Rating)

#MEM
MEM = team_dataframes['MEM']
MEM_Rating = MEM['Machine_Predictions']
MEM_Rating = MEM_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("MEM: ", MEM_Rating)

#CLE
CLE = team_dataframes['CLE']
CLE_Rating = CLE['Machine_Predictions']
CLE_Rating = CLE_Rating.sort_values(ascending=False).iloc[0:10].sum()
print("CLE: ", CLE_Rating)